
namespace SimpleMediaPlayer
{
    using Microsoft.Win32;
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Controls.Primitives;
    using System.Windows.Input;
    using System.Windows.Media;
    using System.Windows.Threading;

    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        /// <summary>
        /// Holds the playing status of the media player; Play or Pause
        /// </summary>
        string _playingStatus;

        /// <summary>
        /// A <see cref="Boolean"/> flag to indicate if slider is being dragged or not
        /// </summary>
        bool _isDragging = false;

        /// <summary>
        /// A <see cref="Boolean"/> flag to indicate if media player is in fullscreen or not
        /// </summary>
        bool _isFullScreen = false;

        /// <summary>
        /// the current position of media playback
        /// </summary>
        double _currentPosition = 0;

        /// <summary>
        /// Holds an instance of the MediaManager class
        /// </summary>
        readonly MediaManager _mediaManager;

        /// <summary>
        /// Holds an instance of DispatcherTimer to work with slider progress
        /// </summary>
        readonly DispatcherTimer _progressTimer;

        /// <summary>
        /// Constructor
        /// </summary>
        public MainWindow ()
        {
            // Called from the other partial class generated by the interface designer
            InitializeComponent();

            // set default height 
            Height = 127;

            // Retrieve command line arguments
            var args = Environment.GetCommandLineArgs().ToList();
            args.RemoveAt(0); // first item is not a media file

            // set data context to this
            DataContext = this;

            // instantiate MediaManager class passing in the MediaElement from the UI
            _mediaManager = new MediaManager(simplePlayer);

            // instantiate the DispatcherTimer and set interval to 1 second
            _progressTimer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(1) };

            // attach progressTimer_Tick method to event timer Tick Event Handler
            _progressTimer.Tick += ProgressTimer_Tick;

            // Handle command line arguments if any were passed
            HandleDrops(args);

            // start the timer
            _progressTimer.Start();
          
            // txtSearchTrack.ContextMenu = null;
        }

        /// <summary>
        /// returns the list of media from the Playlist class
        /// for the playlist listbox to bind to it
        /// </summary>
        public ObservableCollection<Media> Media => MediaPlaylist.Playlist;

        /// <summary>
        /// Enables video mode
        /// </summary>
        void EnableVideoMode ()
        {
            // collapse the playlist holder
            playlistHolder.Visibility = Visibility.Collapsed;

            // show the media player holder
            simplePlayerHolder.Visibility = Visibility.Visible;

            // set media player window height
            simplePlayerWindow.Height = 327;

            // disable the showPlaylist menu item
            showPlaylist.IsEnabled = false;

            // set video mode checkbox to check
            videoMode.IsChecked = true;
        }

        /// <summary>
        /// Disables video mode
        /// </summary>
        void DisableVideoMode ()
        {
            // set height of media player window based on whether showPlaylist is checked or not
            simplePlayerWindow.Height = showPlaylist.IsChecked ? 327 : 127;

            // show the playlist holder
            playlistHolder.Visibility = Visibility.Visible;

            // collapse the media player holder
            simplePlayerHolder.Visibility = Visibility.Collapsed;

            // enable show playlist menu item
            showPlaylist.IsEnabled = true;

            // set video mode checkbox to false
            videoMode.IsChecked = false;
        }

        /// <summary>
        /// Switches media player to fullscreen mode
        /// </summary>
        void SwitchToFullScreenMode()
        {
            // remove the player from its holder
            simplePlayerHolder.Children.Remove(simplePlayer);

            // set window background to black
            Background = Brushes.Black;

            // and set its content to the media player
            Content = simplePlayer;

            // set window style to none
            WindowStyle = WindowStyle.None;

            // set window state to maximized
            WindowState = WindowState.Maximized;

            // set the height and width of the media player to that of the window
            simplePlayer.Width = Width;
            simplePlayer.Height = Height;

            // resume the media player current position
            simplePlayer.Position = TimeSpan.FromSeconds(_currentPosition);

            // set is full screen to true
            _isFullScreen = true;
        }

        /// <summary>
        /// Switches media player back to normal mode from full screen mode
        /// </summary>
        void SwitchToNormalMode()
        {
            // set content back to LayoutRoot
            Content = LayoutRoot;

            // add the media player back it's holder
            simplePlayerHolder.Children.Add(simplePlayer);

            // set window background to white
            Background = Brushes.White;

            // change border style back to SingleBorderWindow
            WindowStyle = WindowStyle.SingleBorderWindow;

            // set WindowState back to Normal
            WindowState = WindowState.Normal;

            // reset height of media player
            simplePlayer.Height = 200;
            simplePlayer.Width = simplePlayerHolder.Width;

            // set the position of the media player
            simplePlayer.Position = _currentPosition == 0 
                ? TimeSpan.FromSeconds(0) 
                : TimeSpan.FromSeconds(_currentPosition);
          
            // set is full screen to false
            _isFullScreen = false;
        }

        /// <summary>
        /// Deletes a media from the playlist
        /// </summary>
        void DeleteMedia ()
        {
            // if not media is selected
            if (lstPlaylist.SelectedIndex == -1)
            {
                // display dialog asking user to select a media
                MessageBox.Show("Please select a media from the playlist to delete", 
                    "Delete Failed", MessageBoxButton.OK, MessageBoxImage.Information);

                return;
            }

            // less likely to happen, but we do not want to end up with an IndexOutOfBoundsException
            if (lstPlaylist.Items.Count > lstPlaylist.SelectedIndex)
                _mediaManager.DeleteMediaFromPlaylist(lstPlaylist.SelectedIndex);
            else
                MessageBox.Show("Out of range", "Delete failed",
                                MessageBoxButton.OK, MessageBoxImage.Information);
        }

        /// <summary>
        /// Opens a file dialog for selecting media
        /// </summary>
        private void OpenFileDialog (bool fromPlaylist = false)
        {
            // creates instance of file dialog using object initiliazation syntax
            // and sets required properties
            var dlgOpen = new OpenFileDialog
            {
                Filter = "All Supported Media types (mp4, mp3, avi, amr etc.)|"
                                + "*.mp4;*.mp3;*.avi;*.wav;*.amr;",
                Multiselect = true
            };

            // add selected media files to playlist if dialog is closed
            if (dlgOpen.ShowDialog() == true)
                HandleDrops(dlgOpen.FileNames.ToList(), fromPlaylist);
        }

        /// <summary>
        /// This method is called by the DispatcherTimer every second
        /// and it updates the slider UI with the current position
        /// of the media playing
        /// </summary>
        /// <param name="sender">Object sender</param>
        /// <param name="e">EventArgs</param>
        void ProgressTimer_Tick ( object sender, EventArgs e )
        {
            // if is not dragging, media player source is not null and has TimeSpan
            if ( !_isDragging && simplePlayer.Source != null && simplePlayer.NaturalDuration.HasTimeSpan )
            {
                // set slider value to media player position in seconds
                sliderProgress.Value = simplePlayer.Position.TotalSeconds;

                // update the UI textEllapsedTime with the value of the slider
                txtEllapsedTime.Text = TimeSpan.FromSeconds(sliderProgress.Value).ToString(@"mm\:ss");

                // set the current position to the slider's value
                _currentPosition = sliderProgress.Value;
            }
        }

        /// <summary>
        /// This method is called when Play or Pause Button is clicked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void BtnPlay_Click ( object sender, RoutedEventArgs e )
        {
            // call Play() from Manager and set playing status to the return value
            _playingStatus = _mediaManager.Play();

            // if is not null
            if (_playingStatus != null)
            {
                // enable the slider
                sliderProgress.IsEnabled = true;

                // update button content and context menu header
                btnPlay.Content = _playingStatus;
                ctxMenuPlayPause.Header = _playingStatus;

                // update window title
                Title = $"{_mediaManager.CurrentMedia} - Simple Media Player";

                // if stop button is not enabled and media player has video, enable video mode
                if (!btnStop.IsEnabled && simplePlayer.HasVideo) EnableVideoMode();

                // if playingStatus is equal to Pause, enable the btnStop
                if (_playingStatus.Equals("Pause")) btnStop.IsEnabled = true;

                return;
            }

            // open file dialog to add media
            OpenFileDialog();
        }

        /// <summary>
        /// This method is called when Stop Button is clicked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void BtnStop_Click ( object sender, RoutedEventArgs e )
        {
            // stop media
            StopMedia();
        }

        /// <summary>
        /// Stops the current active media
        /// </summary>
        void StopMedia()
        {
            // call Stop() from Manager and set playing status to the return value
            _playingStatus = _mediaManager.Stop();

            // disable the slider and stop button
            sliderProgress.IsEnabled = false;
            btnStop.IsEnabled = false;

            // update button content and context menu header
            btnPlay.Content = _playingStatus;
            ctxMenuPlayPause.Header = _playingStatus;

            // update window title
            Title = "Simple Media Player";

            if (simplePlayer.HasVideo)
            {
                if (_isFullScreen) SwitchToNormalMode();
                DisableVideoMode();
            }
        }

        /// <summary>
        /// Call Prev() from MediaManager class to move to the previous media
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void BtnPrev_Click ( object sender, RoutedEventArgs e )
        {
            _mediaManager.Prev();
        }

        /// <summary>
        /// Call Prev() from MediaManager class to move to the next media
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void BtnNext_Click ( object sender, RoutedEventArgs e )
        {
            _mediaManager.Next();
        }

        /// <summary>
        /// This method takes a list of Media Paths, Adds them to the playlist,
        /// and plays the first media in the list if is not from playlist
        /// </summary>
        /// <param name="mediaPaths">media paths</param>
        /// <param name="fromPlaylist">used to indicate whether the drop happened from 
        /// playlist, if it did, it won't play the 1st media</param>
        void HandleDrops (List<string> mediaPaths, bool fromPlaylist = false)
        {
            // set mediaToPlay to the length of the playlist
            int mediaToPlay = MediaPlaylist.Playlist.Count;

            // if mediaPaths contains items
            if (mediaPaths.Count > 0)
            {
                // loop through them
                foreach (string mediaPath in mediaPaths)
                {
                    // if the file exists
                    if (System.IO.File.Exists(mediaPath))
                        // add the media to the playlist
                        MediaPlaylist.AddMedia(mediaPath);     
                }

                // if the playlist contains more than 1 item
                if ( lstPlaylist.Items.Count > 1 )
                {
                    // enable the next and previous buttons and its context menus
                    btnNext.IsEnabled = true;
                    btnPrev.IsEnabled = true;
                    ctxMenuNext.IsEnabled = true;
                    ctxMenuPrev.IsEnabled = true;
                }

                // if not from playlist
                if (!fromPlaylist)
                {
                    // play media
                    _playingStatus = _mediaManager.Play(mediaToPlay);

                    // update play button content and context menu header with status
                    btnPlay.Content = _playingStatus;
                    ctxMenuPlayPause.Header = _playingStatus;
                }
            }
        }

        /// <summary>
        /// Takes care of all necessary task to perform when a media is opened
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void SimplePlayer_MediaOpened ( object sender, RoutedEventArgs e )
        {
            // get the duration of the media
            var timeSpan = simplePlayer.NaturalDuration.TimeSpan;

            // set the slider maximum value to that of the media
            sliderProgress.Maximum = timeSpan.TotalSeconds;

            // set slider small change and large change
            sliderProgress.SmallChange = 1;
            sliderProgress.LargeChange = Math.Min(10, timeSpan.Seconds / 10);

            // update the window title to include the media name
            Title = $"{_mediaManager.CurrentMedia} - Simple Media Player";

            // update the selected index of the playlist to the media's index
            lstPlaylist.SelectedIndex = MediaPlaylist.ActiveIndex;

            // update text end time to lenght of the media
            txtEndTime.Text = TimeSpan.FromSeconds(timeSpan.TotalSeconds).ToString(@"mm\:ss");

            // Enable required controls
            btnStop.IsEnabled = true;
            sliderProgress.IsEnabled = true;

            // this may not be necessary
            if ( MediaPlaylist.Playlist.Count == 0 )
            {
                btnNext.IsEnabled = false;
                btnPrev.IsEnabled = false;
                ctxMenuNext.IsEnabled = false;
                ctxMenuPrev.IsEnabled = false;
            }

            // if media has video
            if ( simplePlayer.HasVideo )
            {
                // enable video mode
                EnableVideoMode();

                // enable full screen menu item and context menu item
                fullScreenMode.IsEnabled = true;
                ctxfullScreenMode.IsEnabled = true;

                return;
            }

            // if media has audio
            if ( simplePlayer.HasAudio )
            {
                // if is in fullscreen mode switch back  
                // to normal mode and disbale video mode
                if ( _isFullScreen )
                    SwitchToNormalMode();

                DisableVideoMode();

                // disable full screen menu item and context menu item
                fullScreenMode.IsEnabled = false;
                ctxfullScreenMode.IsEnabled = false;
            }
        }

        /// <summary>
        /// Media Ended event handler called when a media ends, this
        /// method plays the next media in the playlist
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void SimplePlayer_MediaEnded ( object sender, RoutedEventArgs e )
        {
            // play next media
            _mediaManager.Next();

            // set current position to 0
            _currentPosition = 0;
        }

        /// <summary>
        /// Handles the media failed event when it is fired to display a dialog
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void SimplePlayer_MediaFailed ( object sender, ExceptionRoutedEventArgs e )
        {
            // show an error message
            MessageBox.Show("An error occured, couldn't play " + simplePlayer.Source, "Media Failed",
                            MessageBoxButton.OK, MessageBoxImage.Error);
        }

        void SliderProgress_ValueChanged ( object sender, RoutedPropertyChangedEventArgs<double> e )
        {
            // Todo: To be implemented
        }

        /// <summary>
        /// Called when slider is being dragged
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void SliderProgress_DragStarted ( object sender, DragStartedEventArgs e )
        {
            // set is dragging to true
            _isDragging = true;
        }

        /// <summary>
        /// Called when slider dragging stops
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void SliderProgress_DragCompleted ( object sender, DragCompletedEventArgs e )
        {
            // set is dragging to false
            _isDragging = false;

            // update the position of the media player to the current value of the slider
            simplePlayer.Position = TimeSpan.FromSeconds(sliderProgress.Value);
        }

        /// <summary>
        /// Called when volume slider changes value
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void SliderVolume_ValueChanged ( object sender, RoutedPropertyChangedEventArgs<double> e )
        {
            // calculate the percentage
            int volPercent = (int)(sliderVolume.Value * 100);

            // update the UI with the percentage
            txtVolPercent.Text = volPercent + "%";

            // if slider value is 1
            if ( sliderVolume.Value == 1 )
            {
                // disable increase volume menu item
                volIncrease.IsEnabled = false;

                // enable decrease volume menu item
                volDecrease.IsEnabled = true;

                return;
            }

            // if slider value is 0
            if ( sliderVolume.Value == 0.0 )
            {
                // enable increase volume menu item
                volIncrease.IsEnabled = true;

                // disable decrease volume menu item
                volDecrease.IsEnabled = false;

                return;
            }

            // enable both
            volIncrease.IsEnabled = true;
            volDecrease.IsEnabled = true;
        }

        /// <summary>
        /// Called when mouse is doubled click on the playlist
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void LstPlaylist_MouseDoubleClick ( object sender, MouseButtonEventArgs e )
        {
            // if the playlist item count is not 0 and the mouse button is not right
            if ( lstPlaylist.Items.Count != 0 && e.ChangedButton != MouseButton.Right )
            {
                // call play to play the selected media
                _playingStatus = _mediaManager.Play(lstPlaylist.SelectedIndex);

                // update UI with playing status
                btnPlay.Content = _playingStatus;
                ctxMenuPlayPause.Header = _playingStatus;
            }

            // set event handled to true to prevent bubbling
            e.Handled = true;
        }

        /// <summary>
        /// Called when increase volume menu item or context menu item is clicked 
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void VolumeIncrease_Click ( object sender, RoutedEventArgs e )
        {
            // update the slider value, since the media player 
            // volume is bind to the value of the slider, 
            // volume will automatically update
            sliderVolume.Value += 0.1;
        }

        /// <summary>
        /// Called when decrease volume menu item or context menu item is clicked 
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void VolumeDecrease_Click ( object sender, RoutedEventArgs e )
        {
            // update the slider value, since the media player 
            // volume is bind to the value of the slider, 
            // volume will automatically update
            sliderVolume.Value -= 0.1;
        }

        /// <summary>
        /// Called when show playlist menu item is checked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void ShowPlaylist_Checked ( object sender, RoutedEventArgs e )
        {
            // update the height of the media player window
            simplePlayerWindow.Height = 327;
        }

        /// <summary>
        /// Called when show playlist menu item is unchecked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void ShowPlaylist_Unchecked ( object sender, RoutedEventArgs e )
        {
            // update the height of the media player window
            simplePlayerWindow.Height = 127;
        }

        /// <summary>
        /// Called when Add Media button is clicked, this method
        /// opens a file dialog to add media to playlist
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void AddMedia_Click ( object sender, RoutedEventArgs e )
        {
            // open file dialog
            var fromPlaylist = false;
            try
            {
                var menuItem = (MenuItem)sender;
                fromPlaylist = true;
            }
            catch (InvalidCastException) { }

            OpenFileDialog(fromPlaylist);
        }

        /// <summary>
        /// Called when Delete Media button is clicked to delete media from playlist
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void DeleteMedia_Click ( object sender, RoutedEventArgs e )
        {
            // delete media
            DeleteMedia();
        }

        /// <summary>
        /// Called when playlist selection changes
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void LstPlaylist_SelectionChanged (object sender, SelectionChangedEventArgs e)
        {
            btnDeleteMedia.IsEnabled = true;
        }

        /// <summary>
        /// Handles the drop event handler of the playlist
        /// when files are dropped onto it
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void LstPlaylist_Drop (object sender, DragEventArgs e)
        {
            // retrive the drom files and cast it to an array of strings
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);

            // call handle drops passing in the files
            HandleDrops(files.ToList(), true);

            // set event handled to true to prevent bubbling
            e.Handled = true;
        }

        /// <summary>
        /// Handles the drop event handler of the main StackPanel
        /// when files are dropped onto it
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void StackPanel_Drop ( object sender, DragEventArgs e )
        {
            // retrive the drom files and cast it to an array of strings
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);

            // call handle drops passing in the files
            HandleDrops(files.ToList());

            // set event handled to true to prevent bubbling
            e.Handled = true;
        }

        /// <summary>
        /// Called when context menu delete media item is clicked using the left mouse button
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void CtxMenuDelete_MouseLeftButtonDown ( object sender, MouseButtonEventArgs e )
        {
            DeleteMedia();
        }

        /// <summary>
        /// Called when context menu is about opening on the playlist after right click
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">ContextMenuEventArgs</param>
        void LstPlaylist_ContextMenuOpening ( object sender, ContextMenuEventArgs e )
        {
            // if no items are in the playlist
            if (lstPlaylist.Items.Count == 0)
                e.Handled = true; // don't show the context menu
        }

        /// <summary>
        /// Called when context menu item play or pause is clicked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void CtxMenuPlayPause_Click ( object sender, RoutedEventArgs e )
        {
            // play media
            Play();
        }

        /// <summary>
        /// Calls <see cref="MediaManager.Play(int)"/> to play or pause the current active media 
        /// </summary>
        private void Play ()
        {
            // call play from manager and set playing status
            _playingStatus = _mediaManager.Play();

            // update UI with playing status
            btnPlay.Content = _playingStatus;
            ctxMenuPlayPause.Header = _playingStatus;
        }

        /// <summary>
        /// Called when context menu item stop is clicked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void CtxMenuStop_Click ( object sender, RoutedEventArgs e )
        {
            // stop media
            StopMedia();
        }

        /// <summary>
        /// Called when context menu item next is clicked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void CtxMenuNext_Click ( object sender, RoutedEventArgs e )
        {
            // play next media
            _mediaManager.Next();
        }

        /// <summary>
        /// Called when context menu item prev is clicked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void CtxMenuPrev_Click ( object sender, RoutedEventArgs e )
        {
            // play previous media
            _mediaManager.Prev();
        }

        /// <summary>
        /// Called when video mode menu item is checked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void VideoMode_Checked ( object sender, RoutedEventArgs e )
        {
            // enable video mode
            EnableVideoMode();
        }

        /// <summary>
        /// Called when vide mode menu item is checked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void VideoMode_Unchecked ( object sender, RoutedEventArgs e )
        {
            // disable video mode
            DisableVideoMode();
        }

        /// <summary>
        /// Handles the play context menu of the playlist
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void CtxMenuPlay_Click ( object sender, RoutedEventArgs e )
        {
            // call play from manager and set playing status
            _playingStatus = _mediaManager.Play(lstPlaylist.SelectedIndex);

            // update UI with playing status
            btnPlay.Content = _playingStatus;
            ctxMenuPlayPause.Header = _playingStatus;
        }

        /// <summary>
        /// Handles the delete context menu of the playlist
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void CtxMenuDelete_Click ( object sender, RoutedEventArgs e )
        {
            // delete media
            _mediaManager.DeleteMediaFromPlaylist(lstPlaylist.SelectedIndex);
        }

        #region UnhandledCode
        void btnRepeatMode_Checked ( object sender, RoutedEventArgs e )
        {
            btnRepeatMode.Content = "Repeat mode is on";
        }

        void btnRepeatMode_Unchecked ( object sender, RoutedEventArgs e )
        {
            btnRepeatMode.Content = "Repeat mode is off";
        }
        #endregion

        /// <summary>
        /// Handles full screen mode checked event
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void FullScreenMode_Checked ( object sender, RoutedEventArgs e )
        {
            // switch to full screen mode
            SwitchToFullScreenMode();     
        }

        /// <summary>
        /// Handles full screen mode unchecked event
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void FullScreenMode_Unchecked ( object sender, RoutedEventArgs e )
        {
            // switch to normal mode
            SwitchToNormalMode();
        }

        /// <summary>
        /// Handles full screen clicked event
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void FullScreenMode_Click (object sender, RoutedEventArgs e)
        {
            // set is full screen mode context menu to checked
            ctxfullScreenMode.IsChecked = true;
            SwitchToFullScreenMode();
        }

        /// <summary>
        /// Opens about dialgo box
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void MenuAbout_Click(object sender, RoutedEventArgs e)
        {
            // show about message
            MessageBox.Show("Simple Media Player\nDevelopment Build\n\nSimple media player is a free " +
                "and open source media player under development.\n\n" +
                "It is built in C# on top of the MediaElement class found in WPF, it works only on Windows with a " +
                ".NET Framework version of 4.5, and can read almost all media files.\n\n" +
                "Contact the author on +233547741786 for more information\n\nCopyright © 2019 Twitter, Instagram: @iamranchojr",
                "About", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        /// <summary>
        /// Closes the app when exit application menu item is clicked
        /// </summary>
        /// <param name="sender">Object Sender</param>
        /// <param name="e">RoutedEventArgs</param>
        void ExitApp_Click ( object sender, RoutedEventArgs e )
        {
            // exit application
            Close();
        }
    }
}
